import { DonationResponse } from '../models/response-models/donation-response';
import { DonationRequest } from '../models/request-models/donation-request';
import { PaymentProvidersInterface, PaymentProviders } from './payment-providers';
import { PaymentClientsInterface } from './payment-clients';
import {
  BraintreeManagerInterface,
  BraintreeEndpointManagerInterface,
  HostingEnvironment,
} from './braintree-interfaces';
import { SuccessResponse } from '../models/response-models/success-models/success-response';
import { HostedFieldConfiguration } from './payment-providers/credit-card/hosted-field-configuration';

export class BraintreeManager implements BraintreeManagerInterface {
  get deviceData(): string | undefined {
    return this._deviceData;
  }

  /**
   * The Device Data token generated by the DataCollector.
   *
   * This gets submitted for several of the payment providers as an anti-fraud mechanism.
   *
   * @private
   * @type {string}
   * @memberof BraintreeManager
   */
  private _deviceData?: string;

  /**
   * This contains all of the individual payment providers so as to not clutter the
   * top-level BraintreeManager class.
   *
   * @type {PaymentProvidersInterface}
   * @memberof BraintreeManager
   */
  paymentProviders: PaymentProvidersInterface;

  async startup(): Promise<void> {
    console.debug('braintree startup');
    this.collectDeviceData();
  }

  private clientInstancePromise?: Promise<braintree.Client>;

  async getInstance(): Promise<braintree.Client> {
    if (this.braintreeInstance) {
      return this.braintreeInstance;
    }

    // we only want one instance of this to be created so this chains the promise
    // calls if multiple callers request the instance
    // const originalPromise = this.clientInstancePromise;
    if (this.clientInstancePromise) {
      this.clientInstancePromise = this.clientInstancePromise.then(handler => { return handler });
      return this.clientInstancePromise;
    }

    this.clientInstancePromise = this.paymentClients.getBraintreeClient()
      .then((client: braintree.Client) => {
        return client?.create({ authorization: this.authorizationToken })
      })
      .then((clientInstance: braintree.Client) => {
        this.braintreeInstance = clientInstance;
        return clientInstance;
      });

    return this.clientInstancePromise;
  }

  async submitDataToEndpoint(request: DonationRequest): Promise<DonationResponse> {
    const jsonResponse = await this.endpointManager.submitData(request);
    const modeledResponse = new DonationResponse(jsonResponse);
    return modeledResponse;
  }

  donationSuccessful(options: {
    successResponse: SuccessResponse;
    upsellSuccessResponse?: SuccessResponse;
  }): void {
    this.endpointManager.donationSuccessful(options);
  }

  private deviceDataCollectionStarted = false;

  private async collectDeviceData(): Promise<void> {
    if (this.deviceDataCollectionStarted) { return; }
    this.deviceDataCollectionStarted = true;

    const instance = await this.getInstance();
    if (!instance) {
      return;
    }

    console.debug('collectDeviceData, starting dataCollector');
    this.paymentClients.getDataCollector()
      .then((collector?: braintree.DataCollector) => {
        return collector?.create({ client: instance, kount: false, paypal: true });
      })
      .then(instance => {
        this._deviceData = instance?.deviceData;
      });
  }

  private authorizationToken: string;

  private braintreeInstance: braintree.Client | undefined;

  private endpointManager: BraintreeEndpointManagerInterface;

  private paymentClients: PaymentClientsInterface;

  private hostingEnvironment: HostingEnvironment = HostingEnvironment.Development;

  constructor(options: {
    authorizationToken: string;
    paymentClients: PaymentClientsInterface;
    endpointManager: BraintreeEndpointManagerInterface;
    hostedFieldConfig: HostedFieldConfiguration;
    hostingEnvironment: HostingEnvironment;
    venmoProfileId?: string;
    googlePayMerchantId?: string;
  }) {
    this.authorizationToken = options.authorizationToken;
    this.endpointManager = options.endpointManager;
    this.hostingEnvironment = options.hostingEnvironment;
    this.paymentClients = options.paymentClients;

    this.paymentProviders = new PaymentProviders({
      braintreeManager: this,
      paymentClients: this.paymentClients,
      venmoProfileId: options.venmoProfileId,
      googlePayMerchantId: options.googlePayMerchantId,
      hostingEnvironment: options.hostingEnvironment,
      hostedFieldConfig: options.hostedFieldConfig,
    });
  }
}
